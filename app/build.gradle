plugins {
    id 'org.jetbrains.kotlin.multiplatform'
}

ext {
    kodeinVersion = "6.5.5"
    compose_version = "0.1.0-dev16"
}
apply plugin: 'com.android.application'
apply plugin: 'kotlin-android-extensions'

android {
    compileSdkVersion 29
    defaultConfig {
        applicationId 'org.jetbrains.kotlin.mpp_app_android'
        minSdkVersion 21
        targetSdkVersion 29
        versionCode 1
        versionName '1.0'
        testInstrumentationRunner 'android.support.test.runner.AndroidJUnitRunner'
    }
    buildTypes {
        release {
            minifyEnabled false
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    buildFeatures {
        // Enables Jetpack Compose for this module
        compose true
        viewBinding true
    }
    composeOptions {
        kotlinCompilerVersion kotlin_version
        kotlinCompilerExtensionVersion = compose_version
    }
}

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).configureEach {
    kotlinOptions {
        jvmTarget = "1.8"
        freeCompilerArgs += ["-Xallow-jvm-ir-dependencies", "-Xskip-prerelease-check"]
    }
}

kotlin {
    android()
    jvm {
        compilations.main.kotlinOptions {
            // Setup the Kotlin compiler options for the 'main' compilation:
            jvmTarget = "1.8"
        }
    }
    // This is for iPhone emulator
    // Switch here to iosArm64 (or iosArm32) to build library for iPhone device
    iosX64("ios") {
        binaries {
            framework {
                freeCompilerArgs += "-Xobjc-generics"
                export project(':lib')
                transitiveExport = true
            }
        }
    }
    js {
        browser()
        useCommonJs()

        compilations.all {
            kotlinOptions {
                languageVersion = "1.3"
                moduleKind = "commonjs"
                sourceMap = true
                sourceMapEmbedSources = "always"
                metaInfo = true
            }
        }
    }
    sourceSets {
        commonMain {
            dependencies {
                implementation kotlin('stdlib-common')
                api project(':lib')
                implementation "org.kodein.di:kodein-di-erased:$kodeinVersion"
            }
        }
        commonTest {
            dependencies {
                implementation kotlin('test-common')
                implementation kotlin('test-annotations-common')
            }
        }
        androidMain {
            dependencies {
                implementation kotlin('stdlib')
                implementation "org.kodein.di:kodein-di-erased-jvm:$kodeinVersion"
                implementation "androidx.compose.runtime:runtime:$compose_version"
                implementation "androidx.compose.ui:ui:$compose_version"
                implementation "androidx.compose.foundation:foundation-layout:$compose_version"
                implementation "androidx.compose.material:material:$compose_version"
                implementation "androidx.compose.material:material-icons-extended:$compose_version"
                implementation "androidx.compose.foundation:foundation:$compose_version"
                implementation "androidx.compose.animation:animation:$compose_version"
                implementation "androidx.ui:ui-tooling:$compose_version"
                implementation('androidx.appcompat:appcompat:1.2.0')
                implementation('androidx.activity:activity-ktx:1.1.0')
                implementation "androidx.core:core-ktx:1.3.1"
                implementation "androidx.constraintlayout:constraintlayout:2.0.0-rc1"
                implementation 'com.android.support.constraint:constraint-layout:1.1.3'
                implementation "androidx.recyclerview:recyclerview:1.1.0"
            }
        }
        androidTest {
            dependencies {
                implementation kotlin('test')
                implementation kotlin('test-junit')
                implementation("androidx.ui:ui-test:$compose_version")
                implementation 'com.android.support.test:runner:1.0.2'
            }
        }
        iosMain {
            dependencies {
                implementation kotlin('stdlib')
                implementation "org.kodein.di:kodein-di-erased-iosx64:$kodeinVersion"
            }
        }
        iosTest {
        }
        jsMain {
            dependencies {
                implementation project(':js-react')

                implementation(npm("core-js", "^2.0.0"))

                implementation kotlin('stdlib-js')
                implementation deps.react
                implementation deps.react_dom
                implementation(npm("react", reactVersion))
                implementation(npm("react-dom", reactVersion))
                implementation(npm("react-is", reactVersion))

                def css_version = '1.0.0-pre.91'
                def kotlinext_version = '1.0.1-pre.91'
                implementation "org.jetbrains:kotlin-styled:1.0.0-pre.94-kotlin-1.3.70"
                implementation(npm("styled-components", "^4.3.2"))
                implementation(npm("css-in-js-utils", "^3.0.4"))
                implementation(npm("@jetbrains/kotlin-css", "^$css_version"))
                implementation(npm("@jetbrains/kotlin-css-js", "^$css_version"))
                implementation(npm("@jetbrains/kotlin-extensions", "^$kotlinext_version"))
                implementation(npm("@jetbrains/kotlin-styled", "^$css_version"))
                implementation(npm("inline-style-prefixer", "^5.1.2"))
            }
        }
    }
}

// This task attaches native framework built from ios module to Xcode project
// (see iosApp directory). Don't run this task directly,a
// Xcode runs this task itself during its build process.
// Before opening the project from iosApp directory in Xcode,
// make sure all Gradle infrastructure exists (gradle.wrapper, gradlew).
task copyFramework {
    def buildType = project.findProperty('kotlin.build.type') ?: 'DEBUG'
    def target = project.findProperty('kotlin.target') ?: 'ios'
    dependsOn kotlin.targets."$target".binaries.getFramework(buildType).linkTask

    doLast {
        def srcFile = kotlin.targets."$target".binaries.getFramework(buildType).outputFile
        def targetDir = getProperty('configuration.build.dir')
        copy {
            from srcFile.parent
            into targetDir
            include 'app.framework/**'
            include 'app.framework.dSYM'
        }
    }
}

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}
